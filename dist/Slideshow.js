!function(t){function e(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,e),n.l=!0,n.exports}var r={};e.m=t,e.c=r,e.d=function(t,r,o){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}(r(1))},function(t,e,r){"use strict";var o=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function o(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}();Object.defineProperty(e,"__esModule",{value:!0});var n=r(2);r(3);var i=function(t){function e(e){var r=t.call(this,e)||this;r.componentId="",r.flowKey="",r.attributes={},r.selectedItem=null,r.text="",r.imageArray=[],r.imageArrayPos=0,r.timer=null,r.componentId=e.id,r.flowKey=e.flowKey;var o=manywho.model.getComponent(r.props.id,r.props.flowKey);if(o.attributes)for(var n in o.attributes)r.attributes[n]=o.attributes[n];return r}return o(e,t),e.prototype.componentDidMount=function(){var t=manywho.model.getComponent(this.componentId,this.flowKey);manywho.state.getComponent(this.componentId,this.flowKey);this.imageArray=t.objectData;var e=this.getAttribute("Interval")||5;this.timer=window.setInterval(this.timerFired.bind(this),1e3*e),this.forceUpdate()},e.prototype.timerFired=function(){this.imageArrayPos<this.imageArray.length-1?this.imageArrayPos++:this.imageArrayPos=0,this.forceUpdate()},e.prototype.componentDidUpdate=function(){},e.prototype.getAttribute=function(t){return this.attributes[t]?this.attributes[t]:null},e.prototype.render=function(){var t=null;if(this.imageArray&&this.imageArray.length>0){var e=this.imageArray[this.imageArrayPos],r=manywho.utils.getObjectDataProperty(e.properties,"Url").contentValue;t=n.createElement("img",{src:r,height:"300px"})}return n.createElement("div",{className:"slideshow"},t)},e}(n.Component);manywho.component.register("Slideshow",i),e.default=i},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,